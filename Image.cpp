/*

Blake Troutman 2018
CSCI 557 - Computer Vision
Project 0
1-23-2018

*/

#include "Image.h"

#include <fstream>
#include <vector>
#include <stdexcept>
#include <cmath>


Image loadImage(std::string fileName){
	
	//open file
	std::ifstream imageFile;
	imageFile.open(fileName.c_str(), std::ifstream::binary);
	
	//load file values into vector for parsing
	std::vector<char> data;
	char temp;
	while(imageFile.get(temp)){
		data.push_back(temp);
	}
	
	//close file
	imageFile.close();
	
	//build Image and parse file contents
	struct Image img;
	
	if(data[1] == '5' || data[1] == '2'){
		img.type = 0;
	}else if(data[1] == '6' || data[1] == '3'){
		img.type = 1;
	}else{
		throw std::invalid_argument("Error parsing file. Invalid magic number: " + data[1]);
	}
	
	
	//(skip comments)
	int index = 3;
	while(data[index] == '#'){
		while(data[index] != 10){
			index++;
		}
		index++;
	}
	
	//get width and height numbers
	std::vector<char> widthVector;
	while(data[index] != ' '){
		widthVector.push_back(data[index] - 48);
		index++; 
	}
	index++;
	
	std::vector<char> heightVector;
	while(data[index] != 10){
		heightVector.push_back(data[index] - 48);
		index++;
	}
	index++;
	
	//convert vectors to int
	img.width = 0;
	for(int i = widthVector.size() - 1; i >= 0; i--){
		img.width += widthVector[i] * (int)pow(10, widthVector.size() - 1 - i);
	}
	
	img.height = 0;
	for(int i = heightVector.size() - 1; i >= 0; i--){
		img.height += heightVector[i] * (int)pow(10, heightVector.size() - 1 - i);
	}
	
	//skip past the max value
	while(data[index] != 10){
		index++;
	}
	index++;
	
	//copy pixel data into char array
	int length = data.size() - index;
	img.dataSize = length;
	img.data = new char[length];
	for(int j = 0; j < length; j++){
		img.data[j] = data[index];
		index++;
	}
	
	
	
	
	return img;
	
}//end loadImage









void storeImage(std::string fileName, Image img){
	
	std::ofstream imageFile (fileName.c_str(), std::ofstream::binary | std::ofstream::out);
	
	//magic number
	imageFile.put('P');
	if(img.type == 0){
		imageFile.put('5');
	}else if(img.type == 1){
		imageFile.put('6');
	}
	imageFile.put(10);
	
	
	//comment signature
	std::string signature = "# This image was generated by a function created by Blake Troutman.";
	for(int i = 0; i < signature.size(); i++){
		imageFile.put(signature[i]);
	}
	imageFile.put(10);
	
	
	//split digits of width and height and convert to ascii
	std::vector<char> widthVector;
	int width = img.width;
	while(width > 0){
		char num = width % 10;
		num = num + 48;
		widthVector.push_back(num);
		width = width / 10;
	}
	
	std::vector<char> heightVector;
	int height = img.height;
	while(height > 0){
		char num = height % 10;
		num = num + 48;
		heightVector.push_back(num);
		height = height / 10;
	}
	
	
	//write the width and height (stored in the vectors backwards)
	for(int i = widthVector.size() - 1; i >= 0; i--){
		imageFile.put(widthVector[i]);
	}
	
	imageFile.put(' ');
	
	for(int i = heightVector.size() - 1; i >= 0; i--){
		imageFile.put(heightVector[i]);
	}
	
	imageFile.put(10);
	
	
	//max size of pixel value (255)
	imageFile.put('2');
	imageFile.put('5');
	imageFile.put('5');
	
	imageFile.put(10);
	
	
	//write pixel data to file
	int size = img.width * img.height;
	if(img.type == 1){
		size *= 3;
	}
	
	for(int i = 0; i < size; i++){
		imageFile.put(img.data[i]);
	}
	
	
	imageFile.close();
	
}//end storeImage
